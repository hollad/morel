(*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 *)

(* Miscellaneous ----------------------------------------------- *)
ignore;
val it = fn : 'a -> unit

ignore (1 + 2);
val it = () : unit


(*) map is alias for List_map
map;
val it = fn : ('a -> 'b) -> 'a list -> 'b list

map (fn x => x) [];
val it = [] : 'a list


(* Structures -------------------------------------------------- *)
List;
val it =
  {all=fn,app=fn,at=fn,collate=fn,concat=fn,drop=fn,exists=fn,filter=fn,
   find=fn,foldl=fn,foldr=fn,getItem=fn,hd=fn,last=fn,length=fn,map=fn,
   mapPartial=fn,nil=[],nth=fn,null=fn,partition=fn,rev=fn,revAppend=fn,
   tabulate=fn,take=fn,tl=fn}
  : {all:('a -> bool) -> 'a list -> bool, app:('b -> unit) -> 'b list -> unit, at:'c list * 'c list -> 'c list, collate:('d * 'd -> int) -> 'd list * 'd list -> int, concat:'e list list -> 'e list, drop:'f list * int -> 'f list, exists:('g -> bool) -> 'g list -> bool, filter:('h -> bool) -> 'h list -> 'h list, find:('i -> bool) -> 'i list -> 'i, foldl:('j * 'k -> 'k) -> 'k -> 'j list -> 'k, foldr:('l * 'm -> 'm) -> 'm -> 'l list -> 'm, getItem:'n list -> 'n * 'n list, hd:'o list -> 'o, last:'p list -> 'p, length:'q list -> int, map:('r -> 's) -> 'r list -> 's list, mapPartial:('t -> 'u) -> 't list -> 'u list, nil:'v list, nth:'w list * int -> 'w, null:'x list -> bool, partition:('y -> bool) -> 'y list -> 'y list * 'y list, rev:'z list -> 'z list, revAppend:'ba list * 'ba list -> 'ba list, tabulate:int * (int -> 'bb) -> 'bb list, take:'bc list * int -> 'bc list, tl:'bd list -> 'bd list}

List.rev;
val it = fn : 'a list -> 'a list

List.rev [1,2,3];
val it = [3, 2, 1] : 'a


String;
val it =
  {concat=fn,concatWith=fn,explode=fn,extract=fn,implode=fn,isPrefix=fn,
   isSubstring=fn,isSuffix=fn,map=fn,maxSize=2147483647,size=fn,str=fn,sub=fn,
   substring=fn,translate=fn}
  : {concat:string list -> string, concatWith:string -> string list -> string, explode:string -> char list, extract:string * int -> string, implode:char list -> string, isPrefix:string -> string -> bool, isSubstring:string -> string -> bool, isSuffix:string -> string -> bool, map:(char -> char) -> string -> string, maxSize:int, size:string -> int, str:char -> string, sub:string * int -> char, substring:string * int * int -> string, translate:(char -> string) -> string -> string}


(* String ------------------------------------------------------ *)

(* TODO replace '_' with '.' when we can parse long identifiers;
   e.g. 'String_maxSize' becomes 'String.maxSize' *)

(*) val maxSize : int
String_maxSize;
val it = 2147483647 : int


(*) val size : string -> int
String_size;
val it = fn : string -> int

String_size "abc";
val it = 3 : int

String_size "";
val it = 0 : int


(*) val sub : string * int -> char
String_sub;
val it = fn : string * int -> char

String_sub("abc", 0);
val it = #"a" : char

String_sub("abc", 2);
val it = #"c" : char

(* TODO: need exceptions
String_sub("abc", 20);
*)

(*) val extract   : string * int * int option -> string
(* TODO: support the 'int option' argument *)
String_extract;
val it = fn : string * int -> string

String_extract("abc", 1);
val it = "bc" : string


(*) val substring : string * int * int -> string
String_substring;
val it = fn : string * int * int -> string

String_substring("hello, world", 2, 7);
val it = "llo, wo" : string

String_substring("hello, world", 0, 1);
val it = "h" : string

String_substring("hello", 5, 0);
val it = "" : string

String_substring("", 0, 0);
val it = "" : string


(*) val ^ : string * string -> string
(* TODO *)

(*) val concat : string list -> string
String_concat;
val it = fn : string list -> string

String_concat ["a", "bc", "def"];
val it = "abcdef" : string

String_concat ["a"];
val it = "a" : string

String_concat [];
val it = "" : string


(*) val concatWith : string -> string list -> string
String_concatWith;
val it = fn : string -> string list -> string

String_concatWith "," ["a", "bc", "def"];
val it = "a,bc,def" : string

String_concatWith "," ["a"];
val it = "a" : string

String_concatWith "," ["", ""];
val it = "," : string

String_concatWith "," [];
val it = "" : string


(*) val str : char -> string
String_str;
val it = fn : char -> string

String_str #"a";
val it = "a" : string


(*) val implode : char list -> string
String_implode;
val it = fn : char list -> string

String_implode [#"a", #"b", #"c"];
val it = "abc" : string

String_implode [];
val it = "" : string


(*) val explode : string -> char list
String_explode;
val it = fn : string -> char list

String_explode "abc";
val it = [#"a",#"b",#"c"] : char list

String_explode "";
val it = [] : char list


(*) val map : (char -> char) -> string -> string
String_map;
val it = fn : (char -> char) -> string -> string

String_map (fn c => if c = #"a" then #"A" else if c = #"c" then #"C" else c) "abc";
val it = "AbC" : string

String_map (fn c => if c = #"a" then #"A" else if c = #"c" then #"C" else c) "";
val it = "" : string


(*) val translate : (char -> string) -> string -> string
String_translate;
val it = fn : (char -> string) -> string -> string

String_translate (fn c => if c = #"a" then "AA" else if c = #"c" then "CCC" else "-") "abc";
val it = "AA-CCC" : string

String_translate (fn c => if c = #"a" then "AA" else if c = #"c" then "CCC" else "-") "";
val it = "" : string


(*) val tokens : (char -> bool) -> string -> string list
(*) val fields : (char -> bool) -> string -> string list
(*) val isPrefix    : string -> string -> bool
String_isPrefix;
val it = fn : string -> string -> bool

String_isPrefix "he" "hello";
val it = true : bool

String_isPrefix "el" "hello";
val it = false : bool

String_isPrefix "lo" "hello";
val it = false : bool

String_isPrefix "bonjour" "hello";
val it = false : bool

String_isPrefix "el" "";
val it = false : bool

String_isPrefix "" "hello";
val it = true : bool

String_isPrefix "" "";
val it = true : bool


(*) val isSubstring : string -> string -> bool
String_isSubstring;
val it = fn : string -> string -> bool

String_isSubstring "he" "hello";
val it = true : bool

String_isSubstring "el" "hello";
val it = true : bool

String_isSubstring "lo" "hello";
val it = true : bool

String_isSubstring "bonjour" "hello";
val it = false : bool

String_isSubstring "el" "";
val it = false : bool

String_isSubstring "" "hello";
val it = true : bool

String_isSubstring "" "";
val it = true : bool


(*) val isSuffix    : string -> string -> bool
String_isSuffix;
val it = fn : string -> string -> bool

String_isSuffix "he" "hello";
val it = false : bool

String_isSuffix "el" "hello";
val it = false : bool

String_isSuffix "lo" "hello";
val it = true : bool

String_isSuffix "bonjour" "hello";
val it = false : bool

String_isSuffix "el" "";
val it = false : bool

String_isSuffix "" "hello";
val it = true : bool

String_isSuffix "" "";
val it = true : bool


(*) val compare : string * string -> order
(*) val collate : (char * char -> order) -> string * string -> order
(*) val <  : string * string -> bool
(*) val <= : string * string -> bool
(*) val >  : string * string -> bool
(*) val >= : string * string -> bool

(*) val toString : string -> String_string
(*) val scan       : (char, 'a) StringCvt.reader
(*)                    -> (string, 'a) StringCvt.reader
(*) val fromString : String_string -> string option
(*) val toCString : string -> String_string
(*) val fromCString : String_string -> string option

(* List -------------------------------------------------------- *)

(*) val nil : 'a list
List_nil;
val it = [] : 'a list


(*) val null : 'a list -> bool
List_null;
val it = fn : 'a list -> bool

List_null [];
val it = true : bool

List_null [1];
val it = false : bool


(*) val length : 'a list -> int
List_length;
val it = fn : 'a list -> int

List_length [];
val it = 0 : int

List_length [1,2];
val it = 2 : int


(*) val @ : 'a list * 'a list -> 'a list
List_at;
val it = fn : 'a list * 'a list -> 'a list

List_at ([1], [2, 3]);
val it = [1,2,3] : int list

List_at ([1], []);
val it = [1] : int list

List_at ([], [2]);
val it = [2] : int list

List_at ([], []);
val it = [] : 'a list


(*) val hd : 'a list -> 'a
List_hd;
val it = fn : 'a list -> 'a

List_hd [1,2,3];
val it = 1 : int


(*) val tl : 'a list -> 'a list
List_tl;
val it = fn : 'a list -> 'a list

List_tl [1,2,3];
val it = [2,3] : int list


(*) val last : 'a list -> 'a
List_last;
val it = fn : 'a list -> 'a

List_last [1,2,3];
val it = 3 : int


(*) val getItem : 'a list -> ('a * 'a list) option
List_getItem;
val it = fn : 'a list -> 'a * 'a list

List_getItem [1,2,3];
val it = (1,[2,3]) : int * int list

List_getItem [1];
val it = (1,[]) : int * int list


(*) val nth : 'a list * int -> 'a
List_nth;
val it = fn : 'a list * int -> 'a

List_nth ([1,2,3], 2);
val it = 3 : int

List_nth ([1], 0);
val it = 1 : int


(*) val take : 'a list * int -> 'a list
List_take;
val it = fn : 'a list * int -> 'a list

List_take ([1,2,3], 0);
val it = [] : int list

List_take ([1,2,3], 1);
val it = [1] : int list

List_take ([1,2,3], 3);
val it = [1,2,3] : int list


(*) val drop : 'a list * int -> 'a list
List_drop;
val it = fn : 'a list * int -> 'a list

List_drop ([1,2,3], 0);
val it = [1,2,3] : int list

List_drop ([1,2,3], 1);
val it = [2,3] : int list

List_drop ([1,2,3], 3);
val it = [] : int list


(*) val rev : 'a list -> 'a list
List_rev;
val it = fn : 'a list -> 'a list

List_rev [1,2,3];
val it = [3,2,1] : int list

List_rev [2,1];
val it = [1,2] : int list

List_rev [1];
val it = [1] : int list

List_rev [];
val it = [] : 'a list


(*) val concat : 'a list list -> 'a list
List_concat;
val it = fn : 'a list list -> 'a list

List_concat [[1],[2,3],[4,5,6]];
val it = [1,2,3,4,5,6] : int list

List_concat [[1],[],[4,5,6]];
val it = [1,4,5,6] : int list

List_concat [[],[],[]];
val it = [] : 'a list

List_concat [];
val it = [] : 'a list


(*) val revAppend : 'a list * 'a list -> 'a list
List_revAppend;
val it = fn : 'a list * 'a list -> 'a list

List_revAppend ([1,2],[3,4,5]);
val it = [2,1,3,4,5] : int list

List_revAppend ([1],[3,4,5]);
val it = [1,3,4,5] : int list

List_revAppend ([],[3,4,5]);
val it = [3,4,5] : int list

List_revAppend ([1,2],[]);
val it = [2,1] : int list

List_revAppend ([],[]);
val it = [] : 'a list


(*) val app : ('a -> unit) -> 'a list -> unit
List_app;
val it = fn : ('a -> unit) -> 'a list -> unit

List_app (fn x => ignore (x + 2)) [2,3,4];
val it = () : unit

List_app (fn x => ignore (x + 2)) [];
val it = () : unit


(*) val map : ('a -> 'b) -> 'a list -> 'b list
List_map;
val it = fn : ('a -> 'b) -> 'a list -> 'b list

List_map (fn x => x + 1) [1,2,3];
val it = [2,3,4] : int list

List_map (fn x => x + 1) [];
val it = [] : int list


(*) val mapPartial : ('a -> 'b option) -> 'a list -> 'b list
List_mapPartial;
val it = fn : ('a -> 'b) -> 'a list -> 'b list

List_mapPartial (fn x => x + 1) [1,2,3];
val it = [2,3,4] : int list

List_mapPartial (fn x => x + 1) [];
val it = [] : int list


(*) val find : ('a -> bool) -> 'a list -> 'a option
List_find;
val it = fn : ('a -> bool) -> 'a list -> 'a

List_find (fn x => x mod 7 = 0) [2,3,5,8,13,21,34];
val it = 21 : int


(*) val filter : ('a -> bool) -> 'a list -> 'a list
List_filter;
val it = fn : ('a -> bool) -> 'a list -> 'a list

List_filter (fn x => x mod 2 = 0) [0,1,2,3,4,5];
val it = [0,2,4] : int list

List_filter (fn x => x mod 2 = 0) [1,3];
val it = [] : int list

List_filter (fn x => x mod 2 = 0) [];
val it = [] : int list


(*) val partition : ('a -> bool) -> 'a list -> 'a list * 'a list
List_partition;
val it = fn : ('a -> bool) -> 'a list -> 'a list * 'a list

List_partition (fn x => x mod 2 = 0) [0,1,2,3,4,5];
val it = ([0,2,4],[1,3,5]) : int list * int list

List_partition (fn x => x mod 2 = 0) [1];
val it = ([],[1]) : int list * int list

List_partition (fn x => x mod 2 = 0) [];
val it = ([],[]) : int list * int list


(*) val foldl : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b
List_foldl;
val it = fn : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b

List_foldl (fn (a, b) => a + b) 0 [1,2,3];
val it = 6 : int

List_foldl (fn (a, b) => a + b) 0 [];
val it = 0 : int

List_foldl (fn (a, b) => b) 0 [1,2,3];
val it = 0 : int

List_foldl (fn (a, b) => a - b) 0 [1,2,3,4];
val it = 2 : int


(*) val foldr : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b
List_foldr;
val it = fn : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b

List_foldr (fn (a, b) => a + b) 0 [1,2,3];
val it = 6 : int

List_foldr (fn (a, b) => a + b) 0 [];
val it = 0 : int

List_foldr (fn (a, b) => b) 0 [1,2,3];
val it = 0 : int

List_foldr (fn (a, b) => a - b) 0 [1,2,3,4];
val it = ~2 : int


(*) val exists : ('a -> bool) -> 'a list -> bool
List_exists;
val it = fn : ('a -> bool) -> 'a list -> bool

List_exists (fn x => x mod 2 = 0) [1,3,5];
val it = false : bool

List_exists (fn x => x mod 2 = 0) [2,4,6];
val it = true : bool

List_exists (fn x => x mod 2 = 0) [1,2,3];
val it = true : bool

List_exists (fn x => x mod 2 = 0) [];
val it = false : bool


(*) val all : ('a -> bool) -> 'a list -> bool
List_all;
val it = fn : ('a -> bool) -> 'a list -> bool

List_all (fn x => x mod 2 = 0) [1,3,5];
val it = false : bool

List_all (fn x => x mod 2 = 0) [2,4,6];
val it = true : bool

List_all (fn x => x mod 2 = 0) [1,2,3];
val it = false : bool

List_all (fn x => x mod 2 = 0) [];
val it = true : bool


(*) val tabulate : int * (int -> 'a) -> 'a list
List_tabulate;
val it = fn : int * (int -> 'a) -> 'a list

List_tabulate (5, let fun fact n = if n = 0 then 1 else n * fact (n - 1) in fact end);
val it = [1,1,2,6,24] : int list

List_tabulate (1, let fun fact n = if n = 0 then 1 else n * fact (n - 1) in fact end);
val it = [1] : int list

List_tabulate (0, let fun fact n = if n = 0 then 1 else n * fact (n - 1) in fact end);
val it = [] : int list


(*) val collate : ('a * 'a -> order) -> 'a list * 'a list -> order
List_collate;
val it = fn : ('a * 'a -> int) -> 'a list * 'a list -> int

List_collate (fn (x, y) => if x < y then ~1 else if x = y then 0 else 1) ([1,2,3], [1,3,4]);
val it = ~1 : int

List_collate (fn (x, y) => if x < y then ~1 else if x = y then 0 else 1) ([1,2,3], [1,2,2]);
val it = 1 : int

List_collate (fn (x, y) => if x < y then ~1 else if x = y then 0 else 1) ([1,2,3], [1,2]);
val it = 1 : int

List_collate (fn (x, y) => if x < y then ~1 else if x = y then 0 else 1) ([1,2,3], [1,2,3,4]);
val it = ~1 : int

List_collate (fn (x, y) => if x < y then ~1 else if x = y then 0 else 1) ([1,2,3], []);
val it = 1 : int

List_collate (fn (x, y) => if x < y then ~1 else if x = y then 0 else 1) ([], []);
val it = 0 : int


(* Note: real ML uses "order" not "int", for example
List.collate (fn (x,y) => if x < y then LESS else if x = y then EQUAL else GREATER) ([1,2,3], [1,2,3,4]);
val it = LESS : order
 *)

(* Relational -------------------------------------------------- *)

Relational_count [1, 2, 3];
val it = 3 : int

Relational_count [];
val it = 0 : int

Relational_count [false];
val it = 1 : int


Relational_sum [1, 2, 3];
val it = 6 : int

Relational_sum [1.0, 2.5, 3.5];
val it = 7.0 : real


Relational_max [1, 2, 3];
val it = 3 : int

Relational_max [1.0, 2.5, 3.5];
val it = 3.5 : real

Relational_max ["a", "bc", "ab"];
val it = "bc" : string

Relational_max [false, true];
val it = true : bool


Relational_min [1, 2, 3];
val it = 1 : int

Relational_min [1.0, 2.5, 3.5];
val it = 1.0 : real

Relational_min ["a", "bc", "ab"];
val it = "a" : string

Relational_min [false, true];
val it = false : bool


(* Sys --------------------------------------------------------- *)

(*) val env : unit -> string list
Sys_env;
val it = fn : unit -> (string * string) list

Sys_env ();
val it =
  [
   ("List",
   "{all:forall 'a. ('a -> bool) -> 'a list -> bool, app:forall 'a. ('a -> unit) -> 'a list -> unit, at:forall 'a. 'a list * 'a list -> 'a list, collate:forall 'a. ('a * 'a -> int) -> 'a list * 'a list -> int, concat:forall 'a. 'a list list -> 'a list, drop:forall 'a. 'a list * int -> 'a list, exists:forall 'a. ('a -> bool) -> 'a list -> bool, filter:forall 'a. ('a -> bool) -> 'a list -> 'a list, find:forall 'a. ('a -> bool) -> 'a list -> 'a, foldl:forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b, foldr:forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b, getItem:forall 'a. 'a list -> 'a * 'a list, hd:forall 'a. 'a list -> 'a, last:forall 'a. 'a list -> 'a, length:forall 'a. 'a list -> int, map:forall 'a 'b. ('a -> 'b) -> 'a list -> 'b list, mapPartial:forall 'a 'b. ('a -> 'b) -> 'a list -> 'b list, nil:forall 'a. 'a list, nth:forall 'a. 'a list * int -> 'a, null:forall 'a. 'a list -> bool, partition:forall 'a. ('a -> bool) -> 'a list -> 'a list * 'a list, rev:forall 'a. 'a list -> 'a list, revAppend:forall 'a. 'a list * 'a list -> 'a list, tabulate:forall 'a. int * (int -> 'a) -> 'a list, take:forall 'a. 'a list * int -> 'a list, tl:forall 'a. 'a list -> 'a list}"),
   ("List_all","forall 'a. ('a -> bool) -> 'a list -> bool"),
   ("List_app","forall 'a. ('a -> unit) -> 'a list -> unit"),
   ("List_at","forall 'a. 'a list * 'a list -> 'a list"),
   ("List_collate","forall 'a. ('a * 'a -> int) -> 'a list * 'a list -> int"),
   ("List_concat","forall 'a. 'a list list -> 'a list"),
   ("List_drop","forall 'a. 'a list * int -> 'a list"),
   ("List_exists","forall 'a. ('a -> bool) -> 'a list -> bool"),
   ("List_filter","forall 'a. ('a -> bool) -> 'a list -> 'a list"),
   ("List_find","forall 'a. ('a -> bool) -> 'a list -> 'a"),
   ("List_foldl","forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b"),
   ("List_foldr","forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b"),...]
  : (string * string) list


env;
val it = fn : unit -> (string * string) list

env ();
val it =
  [
   ("List",
   "{all:forall 'a. ('a -> bool) -> 'a list -> bool, app:forall 'a. ('a -> unit) -> 'a list -> unit, at:forall 'a. 'a list * 'a list -> 'a list, collate:forall 'a. ('a * 'a -> int) -> 'a list * 'a list -> int, concat:forall 'a. 'a list list -> 'a list, drop:forall 'a. 'a list * int -> 'a list, exists:forall 'a. ('a -> bool) -> 'a list -> bool, filter:forall 'a. ('a -> bool) -> 'a list -> 'a list, find:forall 'a. ('a -> bool) -> 'a list -> 'a, foldl:forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b, foldr:forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b, getItem:forall 'a. 'a list -> 'a * 'a list, hd:forall 'a. 'a list -> 'a, last:forall 'a. 'a list -> 'a, length:forall 'a. 'a list -> int, map:forall 'a 'b. ('a -> 'b) -> 'a list -> 'b list, mapPartial:forall 'a 'b. ('a -> 'b) -> 'a list -> 'b list, nil:forall 'a. 'a list, nth:forall 'a. 'a list * int -> 'a, null:forall 'a. 'a list -> bool, partition:forall 'a. ('a -> bool) -> 'a list -> 'a list * 'a list, rev:forall 'a. 'a list -> 'a list, revAppend:forall 'a. 'a list * 'a list -> 'a list, tabulate:forall 'a. int * (int -> 'a) -> 'a list, take:forall 'a. 'a list * int -> 'a list, tl:forall 'a. 'a list -> 'a list}"),
   ("List_all","forall 'a. ('a -> bool) -> 'a list -> bool"),
   ("List_app","forall 'a. ('a -> unit) -> 'a list -> unit"),
   ("List_at","forall 'a. 'a list * 'a list -> 'a list"),
   ("List_collate","forall 'a. ('a * 'a -> int) -> 'a list * 'a list -> int"),
   ("List_concat","forall 'a. 'a list list -> 'a list"),
   ("List_drop","forall 'a. 'a list * int -> 'a list"),
   ("List_exists","forall 'a. ('a -> bool) -> 'a list -> bool"),
   ("List_filter","forall 'a. ('a -> bool) -> 'a list -> 'a list"),
   ("List_find","forall 'a. ('a -> bool) -> 'a list -> 'a"),
   ("List_foldl","forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b"),
   ("List_foldr","forall 'a 'b. ('a * 'b -> 'b) -> 'b -> 'a list -> 'b"),...]
  : (string * string) list
